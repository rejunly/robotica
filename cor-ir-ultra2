#include <AFMotor.h>
#include <Ultrasonic.h>

// Definição dos motores
AF_DCMotor motor1(1);
AF_DCMotor motor2(4);
AF_DCMotor motor3(2);
AF_DCMotor motor4(3);

// Definição dos pinos dos sensores
#define PinOUT1 34
#define PinS01 26
#define PinS11 27
#define PinS21 28
#define PinS31 29

#define PinOUT2 35
#define PinS02 30
#define PinS12 31
#define PinS22 32
#define PinS32 33

#define PinInfravermelho 36 // Pino do sensor infravermelho

// Definição do sensor ultrassônico
Ultrasonic ultrassom(23, 22);

int red1, green1, blue1;
int red2, green2, blue2;
int infravermelho;
long distancia;

const unsigned long stopDuration = 1000;
const int limiarDistancia = 20;

void setup() {
  Serial.begin(9600);

  // Configuração dos motores
  motor1.setSpeed(0);
  motor2.setSpeed(0);
  motor3.setSpeed(0);
  motor4.setSpeed(0);
  pararMotores();

  // Configuração dos pinos dos sensores de cor
  pinMode(PinOUT1, INPUT);
  pinMode(PinS21, OUTPUT);
  pinMode(PinS31, OUTPUT);

  pinMode(PinOUT2, INPUT);
  pinMode(PinS22, OUTPUT);
  pinMode(PinS32, OUTPUT);

  // Configuração do sensor infravermelho
  pinMode(PinInfravermelho, INPUT);
}

void loop() {
  // Leitura do sensor ultrassônico
  distancia = ultrassom.Ranging(CM);
  Serial.print("Distância: ");
  Serial.print(distancia);
  Serial.println(" cm");

  if (distancia <= limiarDistancia) {
    pararMotores();
    delay(stopDuration);
    desviar();
  } else {
    seguirLinha();
  }

  delay(100);
}

void seguirLinha() {
  // Leitura dos sensores de cor e infravermelho
  lerSensoresDeCor();
  infravermelho = digitalRead(PinInfravermelho);

  // Implementação da lógica para seguir a linha e lidar com interseções
  if (red1 > 25 && green1 > 25 && blue1 > 25 && red2 > 25 && green2 > 25 && blue2 > 25) {
    norte();  // Ambos sensores leem preto
  } else if (red1 < 10 && green1 < 10 && blue1 < 10 && red2 < 10 && green2 < 10 && blue2 < 10) {
    pararMotores(); // Ambos sensores leem branco
  } else if (infravermelho == LOW && red1 < blue1 && green1 < red1) {
    virarEsquerda(); // Interseção detectada
  } else if (infravermelho == LOW && red2 < blue2 && green2 < red2) {
    virarDireita(); // Interseção detectada
  } else {
    norte(); // Seguir em frente
  }
}

void lerSensoresDeCor() {
  // Leitura do sensor 1
  digitalWrite(PinS21, LOW);
  digitalWrite(PinS31, LOW);
  red1 = pulseIn(PinOUT1, LOW);

  digitalWrite(PinS21, HIGH);
  digitalWrite(PinS31, HIGH);
  green1 = pulseIn(PinOUT1, LOW);

  digitalWrite(PinS21, LOW);
  digitalWrite(PinS31, HIGH);
  blue1 = pulseIn(PinOUT1, LOW);

  // Leitura do sensor 2
  digitalWrite(PinS22, LOW);
  digitalWrite(PinS32, LOW);
  red2 = pulseIn(PinOUT2, LOW);

  digitalWrite(PinS22, HIGH);
  digitalWrite(PinS32, HIGH);
  green2 = pulseIn(PinOUT2, LOW);

  digitalWrite(PinS22, LOW);
  digitalWrite(PinS32, HIGH);
  blue2 = pulseIn(PinOUT2, LOW);
}

void desviar() {
  oeste();
  delay(1000);
  norte();
  delay(1000);
  leste();
  delay(1000);
  pararMotores();
}

void pararMotores() {
  motor1.run(RELEASE);
  motor2.run(RELEASE);
  motor3.run(RELEASE);
  motor4.run(RELEASE);
}

void norte() {
  motor1.run(FORWARD);
  motor2.run(FORWARD);
  motor3.run(FORWARD);
  motor4.run(FORWARD);
}

void virarEsquerda() {
  motor1.run(BACKWARD);
  motor2.run(FORWARD);
  motor3.run(FORWARD);
  motor4.run(BACKWARD);
}

void virarDireita() {
  motor1.run(FORWARD);
  motor2.run(BACKWARD);
  motor3.run(BACKWARD);
  motor4.run(FORWARD);
}

