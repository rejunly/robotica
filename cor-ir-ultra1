#include <AFMotor.h>
#include <Ultrasonic.h>

// Definição de pinos e inicialização de variáveis
Ultrasonic ultrassom(23, 22); // Pinos trig e echo do sensor ultrassônico
AF_DCMotor motor1(1), motor2(4), motor3(2), motor4(3);

#define PinOUT1 34
#define PinS01 26
#define PinS11 27
#define PinS21 28
#define PinS31 29

#define PinOUT2 35
#define PinS02 30
#define PinS12 31
#define PinS22 32
#define PinS32 33

int red1, green1, blue1;
int red2, green2, blue2;

long distancia;
const unsigned long stopDuration = 1000;
const int limiarDistancia = 20; // Distância mínima para tomar ação evasiva

void setup() {
  Serial.begin(9600);

  pinMode(PinOUT1, INPUT);
  pinMode(PinS21, OUTPUT);
  pinMode(PinS31, OUTPUT);

  pinMode(PinOUT2, INPUT);
  pinMode(PinS22, OUTPUT);
  pinMode(PinS32, OUTPUT);

  pararMotores();
}

void loop() {
  distancia = ultrassom.Ranging(CM);
  Serial.print("Distância: ");
  Serial.print(distancia);
  Serial.println(" cm");

  if (distancia <= 8) {
    desviar();
  } else {
    seguirLinha();
  }

  delay(100);
}

void seguirLinha() {
  lerSensoresCor();

  // Verificar as condições para seguir a linha
  if (ehBranco(red1, green1, blue1) && ehBranco(red2, green2, blue2)) {
    norte(); // Ambos sensores veem branco, segue em frente
  } else if (ehPreto(red1, green1, blue1) && ehBranco(red2, green2, blue2)) {
    oeste(); // Desvia levemente para a esquerda
  } else if (ehBranco(red1, green1, blue1) && ehPreto(red2, green2, blue2)) {
    leste(); // Desvia levemente para a direita
  } else if (ehVerde(red1, green1, blue1) || ehVerde(red2, green2, blue2)) {
    // Lógica para interseção, baseado nas condições passadas
    verificarIntersecoes();
  }
}

void desviar() {
  pararMotores();
  delay(stopDuration);
  oeste();
  delay(1000);
  norte();
  delay(1000);
  leste();
  delay(1000);
  pararMotores();
}

void verificarIntersecoes() {
  // Lógica detalhada para cada situação de interseção
  // Aqui você pode implementar a lógica que descreveu, verificando o valor anterior e atual dos sensores
  // Exemplo para a Situação 1
  if (ehVerde(red1, green1, blue1) && ehVerde(red2, green2, blue2) && infravermelhoPreto()) {
    girarNoProprioEixo();
  } else if (ehBranco(red1, green1, blue1) && ehVerde(red2, green2, blue2) && infravermelhoPreto()) {
    leste();
  } else if (ehVerde(red1, green1, blue1) && ehBranco(red2, green2, blue2) && infravermelhoPreto()) {
    oeste();
  }
  // Continue com as outras situações...
}

void lerSensoresCor() {
  // Leitura do sensor 1
  digitalWrite(PinS21, LOW);
  digitalWrite(PinS31, LOW);
  red1 = pulseIn(PinOUT1, LOW);

  digitalWrite(PinS21, HIGH);
  digitalWrite(PinS31, HIGH);
  green1 = pulseIn(PinOUT1, LOW);

  digitalWrite(PinS21, LOW);
  digitalWrite(PinS31, HIGH);
  blue1 = pulseIn(PinOUT1, LOW);

  // Leitura do sensor 2
  digitalWrite(PinS22, LOW);
  digitalWrite(PinS32, LOW);
  red2 = pulseIn(PinOUT2, LOW);

  digitalWrite(PinS22, HIGH);
  digitalWrite(PinS32, HIGH);
  green2 = pulseIn(PinOUT2, LOW);

  digitalWrite(PinS22, LOW);
  digitalWrite(PinS32, HIGH);
  blue2 = pulseIn(PinOUT2, LOW);
}

bool ehPreto(int r, int g, int b) {
  return r > 25 && g > 25 && b > 25;
}

bool ehBranco(int r, int g, int b) {
  return r < 10 && g < 10 && b < 10;
}

bool ehVerde(int r, int g, int b) {
  return g < r && g < b;
}

bool infravermelhoPreto() {
  // Implementar a leitura do sensor infravermelho para verificar o preto
  return true; // Placeholder, ajuste conforme a lógica
}

void pararMotores() {
  motor1.setSpeed(0);
  motor2.setSpeed(0);
  motor3.setSpeed(0);
  motor4.setSpeed(0);
}

void girarNoProprioEixo() {
  motor1.run(BACKWARD);
  motor2.run(FORWARD);
  motor3.run(BACKWARD);
  motor4.run(FORWARD);
  delay(1000);
  pararMotores();
}

void norte() {
  motor1.run(FORWARD);
  motor2.run(FORWARD);
  motor3.run(FORWARD);
  motor4.run(FORWARD);
}

void sul() {
  motor1.run(BACKWARD);
  motor2.run(BACKWARD);
  motor3.run(BACKWARD);
  motor4.run(BACKWARD);
}

void leste() {
  motor1.run(FORWARD);
  motor2.run(BACKWARD);
  motor3.run(BACKWARD);
  motor4.run(FORWARD);
}

void oeste() {
  motor1.run(BACKWARD);
  motor2.run(FORWARD);
  motor3.run(FORWARD);
  motor4.run(BACKWARD);
}
